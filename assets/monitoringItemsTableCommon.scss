@use 'sass:math' as math;
  
$default-bdw: 3px;
$default-boxdiff: 35px;

/* .container > .box > (.group > .box > ...) .pillar > .content */

.container {
  width: 100%;
  box-sizing: border-box;
  color: $green-1;
  line-height: 1.35;

  * {
    box-sizing: border-box;
  }
  
  /* override default styles */
  padding-left: 0 !important;

  ul {
    padding-left: 0;
  }
}

.group {
  flex: 0 0 auto;
  padding-left: $default-bdw !important;
  border-top: $default-bdw solid $green-1;
  border-left: $default-bdw solid $green-1;
}

.content {
  padding: 5px 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  border: $default-bdw solid $green-1;

  > span {
    display: block;

    @include font-size(14);

    &:first-child {
      text-align: left;
      margin-top: 1px;
      flex-shrink: 2;
    }

    &:not(:last-child) {
      overflow-wrap: break-word;
    }
  }

  strong {
    @include font-size(16);
  }

  span.unit {
    @include font-size(14);
  }
}

.box {
  display: block;
  margin-top: $default-bdw;

  &.parent {
    border-top: $default-bdw solid $green-1;
    border-left: $default-bdw solid $green-1;
    position: relative;

    &::after {
      content: '';
      display: block;
      position: absolute;
      left: -1px;
      bottom: 0;
      width: $default-boxdiff;
      border-bottom: $default-bdw solid $green-1;
    }

    > .content {
      margin-left: -($default-boxdiff - $default-bdw * 2);
      border-top: none;
      border-left: none;
      border-bottom: none;
      border-right: $default-bdw solid $green-1;
      width: inherit;
    }
  }
}

@function div($a, $b) {
  $ret: null;
  @if function-exists('math.div') {
    $ret: math.div($a, $b);
  }
  @else {
    $ret: $a / $b;
  }
  @return #{$ret};
}

@function px2vw($px, $vw) {
  @return if($vw > 0, div($px * 100, $vw) + if($px % $vw > 0, 100, 0), $px);
}

@mixin override($vw, $bdw, $fz, $boxdiff) {

  $pad: #{px2vw($bdw, $vw)}vw;
  .group {
    padding-left: $pad !important;
    border-top: $pad solid $green-1;
    border-left: $pad solid $green-1;
  }

  .content {
    padding: #{px2vw(5, $vw)}vw #{px2vw(10, $vw)}vw #{px2vw(5, $vw)}vw #{px2vw(10, $vw)}vw;
    border: $pad solid $green-1;

    > span {
      @include font-size($fz);

      &:first-child {
        margin-top: px2vw(1, $vw);
      }

      &:last-child {
        margin-left: 10px;
      }
    }

    strong {
      @include font-size($fz + 2);
    }

    span.unit {
      @include font-size($fz);
    }
  }

  .box {
    margin-top: $pad;
    $box: #{px2vw($boxdiff, $vw)}vw;

    &.parent {
      border-top: #{$pad} solid $green-1;
      border-left: #{$pad} solid $green-1;
      padding-left: #{$box};

      &::after {
        width: #{$box};
        border-bottom: #{$pad} solid $green-1;
      }

      > .content {
        width: inherit;
        margin-left: -#{$box};
        border-right: #{$pad} solid $green-1;
      }

    }
  }
}

/* Vuetify Breakpoints: Large (1264) */
@include lessThan(1263) {
  @include override(1263, 3, 14, 35);
}

/* Vuetify Breakpoints: Small (960) */
@include lessThan(959) {
  @include override(960, 3, 14, 35);
}

/* Vuetify Breakpoints: Extra Small (600) */
@include lessThan(600) {
  @include override(600, 3, 14, 35);
}
